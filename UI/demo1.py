# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QPushButton, QMainWindow, QApplication, QFileDialog, QWidget, QVBoxLayout, QLabel, \
    QSizePolicy, QDockWidget, QTextEdit
from PyQt5.QtGui import QIcon, QPixmap, QMouseEvent, QFont, QVector3D, QImage
from PyQt5.QtCore import qDebug, QTimer, QObject, QEvent, Qt, pyqtSignal, QThread, QSize


class ConsoleTextEdit(QTextEdit):
    _color_stdout = Qt.blue
    _color_stderr = Qt.red
    _color_stdin = Qt.black
    _multi_line_char = '\\'
    _multi_line_indent = '    '
    _prompt = ('$ ', '  ')  # prompt for single and multi line

    class TextEditColoredWriter:

        def __init__(self, text_edit, color):
            self._text_edit = text_edit
            self._color = color

        def write(self, line):
            old_color = self._text_edit.textColor()
            self._text_edit.setTextColor(self._color)
            self._text_edit.insertPlainText(line)
            self._text_edit.setTextColor(old_color)
            self._text_edit.ensureCursorVisible()

    def __init__(self, parent=None):
        super(ConsoleTextEdit, self).__init__(parent)
        self.setFont(QFont('Mono'))

        self._multi_line = False
        self._multi_line_level = 0
        self._command = ''
        self._history = []
        self._history_index = -1

        # init colored writers
        self._stdout = self.TextEditColoredWriter(self, self._color_stdout)
        self._stderr = self.TextEditColoredWriter(self, self._color_stderr)
        self._comment_writer = self.TextEditColoredWriter(self, self._color_stdin)
        self._add_prompt()

    def print_message(self, msg):
        self._clear_current_line(clear_prompt=True)
        self._comment_writer.write(msg + '\n')
        self._add_prompt()

    def _add_prompt(self):
        self._comment_writer.write(
            self._prompt[self._multi_line] + self._multi_line_indent * self._multi_line_level)

    def _clear_current_line(self, clear_prompt=False):
        # block being current row
        prompt_length = len(self._prompt[self._multi_line])
        if clear_prompt:
            prompt_length = 0
        length = len(self.document().lastBlock().text()[prompt_length:])
        if length == 0:
            return None
        else:
            # should have a better way of doing this but I can't find it
            for _ in range(length):
                self.textCursor().deletePreviousChar()
        return True

    def _move_in_history(self, delta):
        # used when using the arrow keys to scroll through _history
        self._clear_current_line()
        if -1 <= self._history_index + delta < len(self._history):
            self._history_index += delta
        if self._history_index >= 0:
            self.insertPlainText(self._history[self._history_index])
        return True

    def _exec_code(self, code):
        try:
            self._pipe = subprocess.Popen([code], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = self._pipe.communicate(timeout=3)   # 防止永远阻塞
            self._stdout.write(out.decode('utf-8'))
            self._stderr.write(err.decode('utf-8'))
        except Exception as e:
            self._stderr.write(str(e) + '\n')

    def keyPressEvent(self, event):
        prompt_length = len(self._prompt[self._multi_line])
        block_length = self.document().lastBlock().length()
        document_length = self.document().characterCount()
        line_start = document_length - block_length
        prompt_position = line_start + prompt_length

        # only handle keys if cursor is in the last line
        if self.textCursor().position() >= prompt_position:
            if event.key() == Qt.Key_Down:
                if self._history_index == len(self._history):
                    self._history_index -= 1
                self._move_in_history(-1)
                return None

            if event.key() == Qt.Key_Up:
                self._move_in_history(1)
                return None

            if event.key() in [Qt.Key_Backspace]:
                # don't allow cursor to delete into prompt
                if (self.textCursor().positionInBlock() == prompt_length and
                        not self.textCursor().hasSelection()):
                    return None

            if event.key() in [Qt.Key_Return, Qt.Key_Enter]:
                # set cursor to end of line to avoid line splitting
                cursor = self.textCursor()
                cursor.setPosition(document_length - 1)
                self.setTextCursor(cursor)

                self._history_index = -1
                line = str(self.document().lastBlock().text())[
                    prompt_length:].rstrip()  # remove prompt and trailing spaces

                self.insertPlainText('\n')
                if len(line) > 0:
                    if line[-1] == self._multi_line_char:
                        self._multi_line = True
                        self._multi_line_level += 1
                    self._history.insert(0, line)

                    if self._multi_line:  # multi line command
                        self._command += line + '\n'

                    else:  # single line command
                        self._exec_code(line)
                        self._command = ''

                else:  # new line was is empty

                    if self._multi_line:  # multi line done
                        self._exec_code(self._command)
                        self._command = ''
                        self._multi_line = False
                        self._multi_line_level = 0

                self._add_prompt()
                return None

        # allow all other key events
        super(ConsoleTextEdit, self).keyPressEvent(event)

        # fix cursor position to be after the prompt, if the cursor is in the last line
        if line_start <= self.textCursor().position() < prompt_position:
            cursor = self.textCursor()
            cursor.setPosition(prompt_position)
            self.setTextCursor(cursor)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1575, 918)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.topic_list = QtWidgets.QListWidget(self.centralwidget)
        self.topic_list.setObjectName("topic_list")
        self.verticalLayout_2.addWidget(self.topic_list)
        self.refresh_topic_btn = QtWidgets.QPushButton(self.centralwidget)
        self.refresh_topic_btn.setObjectName("refresh_topic_btn")
        self.verticalLayout_2.addWidget(self.refresh_topic_btn)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.message_type = QtWidgets.QLabel(self.centralwidget)
        self.message_type.setText("")
        self.message_type.setObjectName("message_type")
        self.horizontalLayout.addWidget(self.message_type)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 3)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.topic_publisher = QtWidgets.QListWidget(self.centralwidget)
        self.topic_publisher.setObjectName("topic_publisher")
        self.verticalLayout.addWidget(self.topic_publisher)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.topic_subscribers = QtWidgets.QListWidget(self.centralwidget)
        self.topic_subscribers.setObjectName("topic_subscribers")
        self.verticalLayout.addWidget(self.topic_subscribers)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 2)
        self.verticalLayout_5.addLayout(self.horizontalLayout_2)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.start_rviz_btn = QtWidgets.QPushButton(self.centralwidget)
        self.start_rviz_btn.setObjectName("start_rviz_btn")
        self.verticalLayout_3.addWidget(self.start_rviz_btn)
        self.play_btn = QtWidgets.QPushButton(self.centralwidget)
        self.play_btn.setObjectName("play_btn")
        self.verticalLayout_3.addWidget(self.play_btn)
        self.stop_play_btn = QtWidgets.QPushButton(self.centralwidget)
        self.stop_play_btn.setObjectName("stop_play_btn")
        self.verticalLayout_3.addWidget(self.stop_play_btn)
        self.stop_all_btn = QtWidgets.QPushButton(self.centralwidget)
        self.stop_all_btn.setObjectName("stop_all_btn")
        self.verticalLayout_3.addWidget(self.stop_all_btn)
        self.show_bag_info_btn = QtWidgets.QPushButton(self.centralwidget)
        self.show_bag_info_btn.setObjectName("show_bag_info_btn")
        self.verticalLayout_3.addWidget(self.show_bag_info_btn)
        self.record_bag_btn = QtWidgets.QPushButton(self.centralwidget)
        self.record_bag_btn.setObjectName("record_bag_btn")
        self.verticalLayout_3.addWidget(self.record_bag_btn)
        self.stop_record_bag_btn = QtWidgets.QPushButton(self.centralwidget)
        self.stop_record_bag_btn.setDefault(False)
        self.stop_record_bag_btn.setObjectName("stop_record_bag_btn")
        self.verticalLayout_3.addWidget(self.stop_record_bag_btn)
        self.horizontalLayout_3.addLayout(self.verticalLayout_3)
        self.bag_info = QtWidgets.QTextEdit(self.centralwidget)
        self.bag_info.setObjectName("bag_info")
        self.horizontalLayout_3.addWidget(self.bag_info)
        self.horizontalLayout_3.setStretch(0, 1)
        self.horizontalLayout_3.setStretch(1, 4)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.playing_bag = QtWidgets.QListWidget(self.centralwidget)
        self.playing_bag.setObjectName("playing_bag")
        self.verticalLayout_4.addWidget(self.playing_bag)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.up_btn = QtWidgets.QPushButton(self.centralwidget)
        self.up_btn.setObjectName("up_btn")
        self.gridLayout.addWidget(self.up_btn, 0, 4, 1, 1)
        self.left_btn = QtWidgets.QPushButton(self.centralwidget)
        self.left_btn.setObjectName("left_btn")
        self.gridLayout.addWidget(self.left_btn, 1, 3, 1, 1)
        self.right_btn = QtWidgets.QPushButton(self.centralwidget)
        self.right_btn.setObjectName("right_btn")
        self.gridLayout.addWidget(self.right_btn, 1, 5, 1, 1)
        self.down_btn = QtWidgets.QPushButton(self.centralwidget)
        self.down_btn.setObjectName("down_btn")
        self.gridLayout.addWidget(self.down_btn, 2, 4, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 4, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout)
        self.verticalLayout_4.setStretch(0, 1)
        self.verticalLayout_4.setStretch(1, 3)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.horizontalLayout_4.addLayout(self.verticalLayout_5)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.og_widget = GLViewWidget(self.centralwidget)
        self.og_widget.setObjectName("og_widget")
        self.verticalLayout_6.addWidget(self.og_widget)
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.image_label.sizePolicy().hasHeightForWidth())
        self.image_label.setSizePolicy(sizePolicy)
        self.image_label.setAutoFillBackground(False)
        self.image_label.setText("")
        self.image_label.setScaledContents(True)
        self.image_label.setAlignment(QtCore.Qt.AlignCenter)
        self.image_label.setObjectName("image_label")
        self.verticalLayout_6.addWidget(self.image_label)
        self.console_text_edit = ConsoleTextEdit(self.centralwidget)
        self.console_text_edit.setObjectName("console_text_edit")
        self.verticalLayout_6.addWidget(self.console_text_edit)
        self.verticalLayout_6.setStretch(0, 2)
        self.verticalLayout_6.setStretch(1, 1)
        self.verticalLayout_6.setStretch(2, 1)
        self.horizontalLayout_4.addLayout(self.verticalLayout_6)
        self.horizontalLayout_4.setStretch(0, 1)
        self.horizontalLayout_4.setStretch(1, 2)
        self.horizontalLayout_5.addLayout(self.horizontalLayout_4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.refresh_topic_btn.setText(_translate("MainWindow", "刷新话题"))
        self.label.setText(_translate("MainWindow", "Type:"))
        self.label_3.setText(_translate("MainWindow", "Publisher:"))
        self.label_2.setText(_translate("MainWindow", "Subscribers:"))
        self.start_rviz_btn.setText(_translate("MainWindow", "Rviz"))
        self.play_btn.setText(_translate("MainWindow", "播放数据包"))
        self.stop_play_btn.setText(_translate("MainWindow", "停止播放"))
        self.stop_all_btn.setText(_translate("MainWindow", "停止所有播放"))
        self.show_bag_info_btn.setText(_translate("MainWindow", "查看数据包"))
        self.record_bag_btn.setText(_translate("MainWindow", "记录数据包"))
        self.stop_record_bag_btn.setText(_translate("MainWindow", "停止记录"))
        self.up_btn.setText(_translate("MainWindow", "Up"))
        self.left_btn.setText(_translate("MainWindow", "Left"))
        self.right_btn.setText(_translate("MainWindow", "Right"))
        self.down_btn.setText(_translate("MainWindow", "Down"))
        self.label_5.setText(_translate("MainWindow", "Turtlesim"))
from pyqtgraph.opengl import GLViewWidget

